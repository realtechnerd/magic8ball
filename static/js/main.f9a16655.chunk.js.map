{"version":3,"sources":["components/Header.jsx","components/Replies.js","components/Magic8Ball.jsx","components/Input.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","replies","Magic8Ball","props","output","src","id","alt","Input","state","dmode","submit","bind","e","i","Replies","sort","Math","random","this","setState","console","log","preventDefault","onSubmit","type","autoComplete","placeholder","Component","MainContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAYeA,MATf,WACI,OACA,yBAAKC,UAAU,mBACX,4CACA,uBAAGC,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAA7D,0B,mCCeOC,EAtBC,CAAC,oBACjB,mBACA,2BACA,sBACA,6BACA,0BACA,iBACA,sBACA,eACA,kBACA,qBACA,uBACA,gBACA,yBACA,sBACA,iBACA,mBACA,OACA,yBACA,uBCHeC,MAdf,SAAoBC,GAChB,MAAqB,KAAjBA,EAAMC,OACC,KAGP,yBAAKP,UAAU,OACX,yBAAKA,UAAU,cACf,yBAAKQ,IAAI,+EAA+EC,GAAG,MAAMC,IAAI,KACrG,yBAAKV,UAAU,YAAYM,EAAMC,WCqC9BI,E,kDAzCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTL,OAAQ,GACRM,OAAO,GAEX,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBANJ,E,mDAQPC,GACH,IACMC,EADUC,EACEC,MAAK,kBAAMC,KAAKC,SAAW,MAC7CC,KAAKC,SAAS,CACVhB,OAAQU,EAAE,KAGdO,QAAQC,IAAIH,KAAKV,MAAML,QAEvBS,EAAEU,mB,+BAGF,OACI,6BACI,yBAAKjB,GAAG,OAAOT,UAAU,iBACrB,0BAAM2B,SAAUL,KAAKR,QACjB,8DACA,2BACIc,KAAK,OACLnB,GAAG,QACHT,UAAU,YACV6B,aAAa,MACbC,YAAY,YAIxB,6BACA,kBAAC,EAAD,CAAYvB,OAAQe,KAAKV,MAAML,c,GApC3BwB,aCSLC,MAVf,WACI,OACI,yBAAKhC,UAAU,aACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,SCKDiC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.f9a16655.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return(\r\n    <div className=\"Header Cardmode\">\r\n        <h1>Magic 8 Ball</h1>\r\n        <a href=\"https://realtechnerd.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">By Nithil Krishnaraj</a>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Header;","const replies = [\"As I see it, yes.\",\r\n\"Ask again later.\",\r\n\"Better not tell you now.\",\r\n\"Cannot predict now.\",\r\n\"Concentrate and ask again.\",\r\n\"Don’t count on it.\",\r\n\"It is certain.\",\r\n\"It is decidedly so.\",\r\n\"Most likely.\",\r\n\"My reply is no.\",\r\n\"My sources say no.\",\r\n\"Outlook not so good.\",\r\n\"Outlook good.\",\r\n\"Reply hazy, try again.\",\r\n\"Signs point to yes.\",\r\n\"Very doubtful.\",\r\n\"Without a doubt.\",\r\n\"Yes.\",\r\n\"Yes – definitely.\",\r\n\"You may rely on it.\"\r\n]\r\n\r\nexport default replies;","import React from 'react';\r\n\r\nfunction Magic8Ball(props) {\r\n    if (props.output === \"\") {\r\n        return null;\r\n    }\r\n    return(\r\n        <div className=\"Pad\">\r\n            <div className=\"containeri\">\r\n            <img src=\"https://spaces.profoundjs.com/ide/bernice/magic-8-ball-app/public/8-Ball.png\" id=\"img\" alt=\"\"/>\r\n            <div className=\"centered\">{props.output}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Magic8Ball;","import React, { Component } from 'react';\r\nimport Replies from \"./Replies.js\";\r\nimport Magic8Ball from \"./Magic8Ball.jsx\";\r\nimport \"./style.css\";\r\n\r\nclass Input extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            output: \"\",\r\n            dmode: false\r\n        }\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n    submit(e) {\r\n        const replies = Replies;\r\n        const i = replies.sort(() => Math.random() - 0.5);\r\n        this.setState({\r\n            output: i[0]\r\n        })\r\n\r\n        console.log(this.state.output)\r\n\r\n        e.preventDefault();\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div id=\"Card\" className=\"Card Cardmode\">\r\n                    <form onSubmit={this.submit}>\r\n                        <h1>Ask the Magic 8 Ball anything.</h1>\r\n                        <input \r\n                            type=\"text\" \r\n                            id=\"input\"\r\n                            className=\"Inputmode\"\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"Ask..\"\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <br/>\r\n                <Magic8Ball output={this.state.output}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Input;","import React from 'react';\r\nimport Input from './Input.jsx';\r\nimport \"./style.css\";\r\n\r\nfunction MainContent() {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"MainContent\">\r\n                <Input/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\r\nimport Header from \"./components/Header.jsx\";\r\nimport MainContent from \"./components/MainContent.jsx\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <MainContent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}